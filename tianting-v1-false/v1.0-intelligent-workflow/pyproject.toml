[tool.poetry]
name = "tianting-system"
version = "1.0.0"
description = "天庭智能工作流引擎 - 让'言出法随'成为现实"
authors = ["天庭开发团队 <dev@tianting.ai>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/tianting/v1.0-intelligent-workflow"
repository = "https://github.com/tianting/v1.0-intelligent-workflow"
documentation = "https://tianting.ai/docs"
keywords = ["ai", "workflow", "automation", "requirements-analysis", "project-planning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# 项目不作为包发布，仅用于依赖管理
package-mode = false

[tool.poetry.dependencies]
python = "^3.8.1"

# Core包依赖
pydantic = "^2.0.0"
python-dotenv = "^1.0.0"

# API包依赖
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
asyncpg = "^0.29.0"
alembic = "^1.13.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
redis = "^5.0.1"
httpx = "^0.25.2"
structlog = "^23.2.0"
prometheus-client = "^0.19.0"

[tool.poetry.group.dev.dependencies]
# 开发工具
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"

# 代码质量工具
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"

# 类型提示
types-redis = "^4.6.0.11"
types-passlib = "^1.7.7.13"

[tool.poetry.group.test.dependencies]
# 测试专用依赖
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
coverage = "^7.0.0"

[tool.poetry.group.docs.dependencies]
# 文档生成
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocs-mermaid2-plugin = "^1.1.0"

[tool.poetry.scripts]
# 服务启动脚本
start-core = "python packages/core/main.py"
start-api = "python packages/api/main.py"
start-frontend = "cd packages/frontend && npm start"

# 开发工具脚本
lint = "flake8 packages/"
format = "black packages/ && isort packages/"
test = "pytest packages/"
test-cov = "pytest packages/ --cov=packages --cov-report=html"

# 项目管理脚本
setup = "bash scripts/setup-project.sh"
health-check = "bash scripts/health-check.sh"
reset-env = "bash scripts/reset-environment.sh"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Poetry配置
[tool.poetry.urls]
"Bug Tracker" = "https://github.com/tianting/v1.0-intelligent-workflow/issues"
"Documentation" = "https://tianting.ai/docs"
"Source Code" = "https://github.com/tianting/v1.0-intelligent-workflow"

# 工具配置
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tianting"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["packages"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["packages"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]